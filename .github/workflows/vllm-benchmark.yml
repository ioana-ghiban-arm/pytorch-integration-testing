name: VLLM Benchmark

on:
  schedule:
    # Run every 6 hours (4 times a day)
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering
  pull_request:
    paths:
      - .github/workflows/vllm-benchmark.yml

jobs:
  benchmark-h100:
    name: Run vLLM benchmarks
    runs-on: linux.aws.h100.4
    secrets: inherit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout vLLM repository
        uses: actions/checkout@v4
        with:
          repository: vllm-project/vllm
          path: vllm-benchmarks/vllm
          ref: main

      - name: Setup benchmark tests
        working-directory: vllm-benchmarks
        run: |
          # Set the list of benchmarks we want to cover in PyTorch infra
          cp -r benchmarks/*.json vllm/.buildkite/nightly-benchmarks/tests

      - name: Set GPU device name
        working-directory: vllm-benchmarks
        run: |
          export GPU_DEVICE=$(nvidia-smi -i 0 --query-gpu=name --format=csv,noheader | awk '{print $2}')
          echo "GPU_DEVICE=$GPU_DEVICE" >> $GITHUB_ENV

      - name: Check for last benchmark commit
        working-directory: vllm-benchmarks
        run: |
          HEAD_BRANCH=main

          # Get the last green commit from S3
          S3_PATH="last-green-commits/vllm-project/vllm/${HEAD_BRANCH}/${GPU_DEVICE}/commit"
          NOT_EXIST=0
          aws s3api head-object --bucket ossci-benchmarks --key ${S3_PATH} || NOT_EXIST=1

          if [[ ${NOT_EXIST} == "0" ]]; then
            aws s3 cp "s3://ossci-benchmarks/${S3_PATH}" .
            LAST_GREEN_COMMIT=$(cat commit)
            echo "LAST_GREEN_COMMIT=$LAST_GREEN_COMMIT" >> $GITHUB_ENV
          else
            echo "LAST_GREEN_COMMIT=none" >> $GITHUB_ENV
          fi

          pushd vllm
          HEAD_SHA=$(git rev-parse --verify HEAD)
          popd

          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV

      - name: Setup GPU_FLAG for docker run
        run: |
          echo "GPU_FLAG=--gpus all -e NVIDIA_DRIVER_CAPABILITIES=all" >> "${GITHUB_ENV}"

      - name: Setup SCCACHE_SERVER_PORT environment for docker run when on container
        run: |
          echo "SCCACHE_SERVER_PORT_DOCKER_FLAG=-e SCCACHE_SERVER_PORT=$((RUNNER_UID + 4226))" >> "${GITHUB_ENV}"

      - name: Run vLLM benchmark
        if: env.LAST_GREEN_COMMIT == 'none'
        shell: bash
        env:
          SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
          SCCACHE_REGION: us-east-1
          HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}
          DOCKER_IMAGE: public.ecr.aws/q9t5s3a7/vllm-ci-postmerge-repo:${{ env.HEAD_SHA }}
        run:
          set -eux

          container_name=$(docker run \
            ${GPU_FLAG:-} \
            ${SCCACHE_SERVER_PORT_DOCKER_FLAG:-} \
            -e SCCACHE_BUCKET \
            -e SCCACHE_REGION \
            -e HUGGING_FACE_HUB_TOKEN \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --ipc=host \
            --tty \
            --detach \
            --name="${container_name}" \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )

          docker exec -t "${container_name}" sh -c "ls -la"

#      - name: Setup Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'
#          cache: 'pip'
#
#      - name: Install dependencies
#        working-directory: vllm-benchmarks
#        run: |
#          pip install -r requirements.txt
#
#      - name: Setup benchmark tests
#        working-directory: vllm-benchmarks
#        run: |
#          # Set the list of benchmarks we want to cover in PyTorch infra
#          cp -r benchmarks/*.json vllm/.buildkite/nightly-benchmarks/tests
#
#      - name: Set GPU device name
#        working-directory: vllm-benchmarks
#        run: |
#          export GPU_DEVICE=$(nvidia-smi -i 0 --query-gpu=name --format=csv,noheader | awk '{print $2}')
#          echo "GPU_DEVICE=$GPU_DEVICE" >> $GITHUB_ENV
#
#      - name: Check for last benchmark commit
#        working-directory: vllm-benchmarks
#        run: |
#          HEAD_BRANCH=main
#
#          # Get the last green commit from S3
#          S3_PATH="last-green-commits/vllm-project/vllm/${HEAD_BRANCH}/${GPU_DEVICE}/commit"
#          NOT_EXIST=0
#          aws s3api head-object --bucket ossci-benchmarks --key ${S3_PATH} || NOT_EXIST=1
#
#          if [[ ${NOT_EXIST} == "0" ]]; then
#            aws s3 cp "s3://ossci-benchmarks/${S3_PATH}" .
#            LAST_GREEN_COMMIT=$(cat commit)
#            echo "LAST_GREEN_COMMIT=$LAST_GREEN_COMMIT" >> $GITHUB_ENV
#          else
#            echo "LAST_GREEN_COMMIT=none" >> $GITHUB_ENV
#          fi
#
#          pushd vllm
#          HEAD_SHA=$(git rev-parse --verify HEAD)
#          popd
#
#          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
#
#      - name: Run benchmarks for latest commit
#        if: env.LAST_GREEN_COMMIT == 'none'
#        working-directory: vllm-benchmarks
#        run: |
#          set -eux
#
#          # Run benchmark for current HEAD
#          ./run.sh ${{ env.HEAD_SHA }}
#
#          # Update last green commit
#          S3_PATH="v3/vllm-project/vllm/main/${{ env.HEAD_SHA }}/${GPU_DEVICE}/benchmark_results.json"
#          NOT_EXIST=1
#          aws s3api head-object --bucket ossci-benchmarks --key ${S3_PATH} || NOT_EXIST=0
#
#          if [[ ${NOT_EXIST} == "1" ]]; then
#            echo "${{ env.HEAD_SHA }}" > commit
#            echo "Mark ${{ env.HEAD_SHA }} as the latest commit that has been benchmarked on main"
#
#            S3_PATH="last-green-commits/vllm-project/vllm/main/${GPU_DEVICE}/commit"
#            aws s3 cp commit "s3://ossci-benchmarks/${S3_PATH}"
#          fi

#      - name: Get new commits to benchmark
#        if: env.LAST_GREEN_COMMIT != 'none' && env.LAST_GREEN_COMMIT != env.HEAD_SHA
#        id: get-commits
#        working-directory: vllm-benchmarks
#        run: |
#          COMMITS=$(python get_commits.py --repo vllm --from-commit ${{ env.LAST_GREEN_COMMIT }})
#          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
#          echo "$COMMITS" >> $GITHUB_OUTPUT
#          echo "EOF" >> $GITHUB_OUTPUT
#
#      - name: Run benchmarks for new commits
#        if: env.LAST_GREEN_COMMIT != 'none' && env.LAST_GREEN_COMMIT != env.HEAD_SHA
#        working-directory: vllm-benchmarks
#        run: |
#          # Process each commit
#          echo "${{ steps.get-commits.outputs.COMMITS }}" | while IFS= read -r COMMIT ; do
#            # Checkout this specific commit
#            pushd vllm
#            git checkout ${COMMIT}
#            popd
#
#            # Run benchmark
#            ./run.sh ${COMMIT}
#
#            # Check if benchmark results exist and update last green commit
#            S3_PATH="v3/vllm-project/vllm/main/${COMMIT}/${GPU_DEVICE}/benchmark_results.json"
#            NOT_EXIST=1
#            aws s3api head-object --bucket ossci-benchmarks --key ${S3_PATH} || NOT_EXIST=0
#
#            if [[ ${NOT_EXIST} == "1" ]]; then
#              echo "${COMMIT}" > commit
#              echo "Mark ${COMMIT} as the latest commit that has been benchmarked on main"
#
#              S3_PATH="last-green-commits/vllm-project/vllm/main/${GPU_DEVICE}/commit"
#              aws s3 cp commit "s3://ossci-benchmarks/${S3_PATH}"
#            fi
#          done
